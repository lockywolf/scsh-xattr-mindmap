#!/usr/bin/env -S scsh -dm -m mindmap -e newmain -s
!#
#!
Time-stamp: <2021-04-06 15:05:47 lockywolf>
#+description: A port of dir2dot by Darxus@ChaosReighs.com into scsh.
#+author: lockywolf
#+created: <2021-03-17 Wed>
#+category: utilities
#+tags: programming, mind, mind-map, scheme
#+creator: Emacs 27.1/org-mode 9.4
Usage:
time filesystem-mindmap-scheme root > /tmp/dirtree.dot
time circo -Tpng dirtree.dot > dirtree.png
You can try other engines.
On my machine sfdp takes 3 hours on ~3000 nodes.
Graphviz: https://www.graphviz.org/

Legend:
Files: boxes
File types: font colours
Directory shapes: ordinary:oval, project:house, repo:doubleoctagon
Fillcolor: incompletely displayed trees

TODO:
1. Filesystem boundaries option.
2. Recurse into projects option.
3. File name colouring.
4. Displaying images.
5.

Far TODO:
1. Music albums.
2. Other kinds of projects.
3. 

!#

;; (if (zero? (run (ls)))
;;    (display "LS successful.\n")
;;    (display "LS unsuccessful."))
;; (display "Hello\n")
;; (display "arguments:")
;; (display command-line-arguments)
;; (newline)
;; (display "(argv 1 \".\"): ") (display (argv 1 ".")) (newline)
;; (display "string-join test:") (display (string-join  (list "string1" "string2") "/" ))
;; (newline)



(define-interface mindmap-interface (export newmain))

(define-structure mindmap mindmap-interface
  (open
   scheme-with-scsh
   os-strings
   (subset srfi-13 (string-join))
   (subset srfi-1 (lset-intersection lset<= lset-difference remove length+ take))
   (subset i/o (set-port-text-codec!))
   (subset text-codecs (utf-8-codec))
   (subset tables (make-string-table table-ref table-set! table-walk))
   (subset srfi-27 (random-integer)))

  (begin

    (define config-recurse-into-dotfiles #t)
    (define config-album-show-max-files 5)
    (define config-stop-at-repos #f)

    (define (directory-files-without-ignores . o)
      (let ((ans (apply directory-files o)))
        (lset-difference equal? ans
                         (list)))) ; was "cache"

    (define (newmain args)
      ;; (display "debug: args: ") (display args) (newline)
      ;; (display (length args))
      (define actual-directory (absolute-file-name
                                     (expand-file-name (if (< (length+ args) 2)
                                                          "."
                                                          (list-ref args 1)))))
      (print-prologue actual-directory)
      (walk-tree-and-print-edges "" actual-directory)
      (newline)
      (print-nodes)
      (print-epilogue))

    (define filesep "/")

    (define (directory-something? path detector-list)
      (not (null? (lset-intersection equal? detector-list (directory-files path #t)))))

    (define directory-repo-marker-list (list ".git" ".svn" ".cvs"))

    (define (directory-repo? path)
      (directory-something? path directory-repo-marker-list))

    (define directory-project-marker-list (list "Makefile"
                                           "configure.ac"
                                           "Makefile.am"
                                           "configure"
                                           "index.html"))

    (define (directory-project? path)
      (directory-something? path directory-project-marker-list))

    (define directory-deliberately-terminate-list (list "LWF-MINDMAP-TERMINATE"))

    (define (directory-deliberately-terminate? path)
      (directory-something? path directory-deliberately-terminate-list))

    (define image-extensions-list
      (list ".jpg" ".JPG" ".jpeg" ".JPEG" ".tif" ".TIF" ".tiff" ".TIFF" ".gif" ".GIF" ".webp"))

    (define (directory-only-directories . o)
      (let* ((raw-contents (apply directory-files-without-ignores o)))
        (with-cwd (car o)
                  (remove (lambda (x) (not (file-directory? x #f)))
                  raw-contents))))

    (define (directory-only-files . o)
      (let* ((raw-contents (apply directory-files-without-ignores o)))
        (with-cwd (car o)
                  (remove (lambda (x) (file-directory? x #f))
                  raw-contents))))

    (define (directory-album? path)
      (if (not (file-directory? path #f))
         (begin (display "error: directory-album?, argument path is not a directory: ")
                (display path)
                (newline)
                (exit)))
      (let* ((d-cur-exts (map (lambda (name) (file-name-extension name))
                              (directory-only-files path)))
             (retval (and (not (null? d-cur-exts))
                        (lset<= equal? d-cur-exts image-extensions-list))))
        retval))

    (define (parse-filename filename)
      (regexp-fold (rx (+ (~ "/")))
                   (lambda (i m lis)
                     (cons (match:substring m 0) lis))
                   '() filename))

    (define (escape-like-write s)
      (let ((p (make-string-output-port)))
        (set-port-text-codec! p utf-8-codec)
        (write s p)
        (string-output-port-output p)))

    

    (define inode-filename-table
      (make-string-table))

    (define (make-file-record description shape fillcolor pos)
      (list description shape fillcolor pos))
    (define (file-record-description f-r)
      (list-ref f-r 0))
    (define (file-record-shape f-r)
      (list-ref f-r 1))
    (define (file-record-fillcolor f-r)
      (list-ref f-r 2))
    (define (file-record-pos f-r)
      (list-ref f-r 3))

    
    (define (lwf-make-dev-plus-inode path)
      (if (file-exists? path #f)
       (let ((f-i (file-info path #f)))
        (string-append "id_"
                       (number->string (file-info:device f-i))
                       "_"
                       (number->string (file-info:inode  f-i))))
       (string-append "dangling_" (number->string (random-integer 9999999))
                      ;; (escape-like-write-without-quotes path)
                      )))
    
    
    (define (inode-filename-table-insert-or-update  full-path basename pos)
      (define (combine wrapped-name-1 wrapped-name-2)
        (string-append wrapped-name-1 "\n---\n" wrapped-name-2))
      (define my-id-dev-inode (lwf-make-dev-plus-inode full-path))
      (define wrapped-name (wrap-string-hack basename))
      ;; (display "inserting:") (display full-path) (display " ") (display my-id-dev-inode) 
      (let* ((cunzai (table-ref inode-filename-table my-id-dev-inode))
             (to-insert (if cunzai
                            (make-file-record (combine (file-record-description cunzai)
                                                       wrapped-name)
                                              (file-record-shape cunzai)
                                              (file-record-fillcolor cunzai)
                                              (file-record-pos cunzai))
                            (make-file-record wrapped-name
                                              (select-node-shape full-path)
                                              (select-node-fillcolor full-path)
                                              pos))))
          (table-set! inode-filename-table
                      my-id-dev-inode
                      to-insert)))

    (define (print-nodes)
      (table-walk
       (lambda (k v)
         (display (format-node k
                               (file-record-description v)
                               (file-record-shape v)
                               (file-record-fillcolor v)
                               (file-record-pos v)))
         (newline))
       inode-filename-table))

    (define (format-node node-id label shape fillcolor pos)
      (string-append
       node-id "  [label="
       (escape-like-write label)
       " , shape=\""
       shape
       "\" , fillcolor=\""
       fillcolor
       "\" "
       pos
       ", fontsize=7, margin=\"0,0!\", width=0.01, height=0.01] //  " ))

    (define (should-stop-at? full-path)
      (or (not (file-directory? full-path #f))
         (and config-stop-at-repos (directory-repo? full-path))
         (directory-project? full-path)
         (directory-deliberately-terminate? full-path)
         ;; (directory-album? full-path)
         ))

    (define (directory-semantic-type path)
      (cond ((not (file-directory? path #f)) 'ordinary)
            ((directory-repo? path) 'repo)
            ((directory-project? path) 'project)
            ((directory-album? path) 'album)
            (else 'unknown)))

    (define (identity x )
      x)
    
    (define (album-filter l dotfiles)
      (let* ((files (directory-only-files l dotfiles))
             (dirs (directory-only-directories l dotfiles))
             (ntrunc (min (length+ files) config-album-show-max-files))
             (truncated-files (take files ntrunc)))
        (append dirs truncated-files)))
    
    (define (get-children-filter symbol)
      (case symbol
        ((album) album-filter)
        (else directory-files-without-ignores)))
    
    (define (walk-tree-and-print-edges parent file)
      (define full-path (expand-file-name file parent))
      ;;      (display "processing:") (display full-path)(newline)
      (define pos (if (equal? parent "")
                ", pos=\"0,0!\", pin=true, root=true"
                ""))
      ;; (display "parent=") (display parent) (newline)
      ;; (display "file=") (display file) (newline)
      ;; (display "full-path=") (display full-path) (newline)
      ;; (display "pos=") (display pos) (newline)
      (inode-filename-table-insert-or-update full-path file pos)

      ;; (newline)
      (if (not (equal? parent ""))
       (display (format-edge parent full-path)))
      (if (should-stop-at? full-path)
         #t ;; (begin (display " // (terminal)") (newline))
         (let ((children ((get-children-filter (directory-semantic-type full-path))
                          full-path config-recurse-into-dotfiles)))
           (map (lambda (f) (newline) (walk-tree-and-print-edges full-path f))
                children))))

    (define (escape-like-write-without-quotes str1)
      (let* ((str (escape-like-write str1))
             (lenstr (string-length str)))
        (substring str 1 (- lenstr 1))))

    ; overlap can be "false" (use Prism algorithm) or "scale", which preserves symmetry, but makes graphs larger
    (define (print-prologue title)
      (display "digraph \"directory tree\" {\n")
      ; https://stackoverflow.com/questions/3967600/how-to-prevent-edges-in-graphviz-to-overlap-each-other
      (display (string-append
                "graph [overlap=false, splines=true, size=45, dpi=300, rankdir=LR label=\"Filesystem map, Directory: '"
                (escape-like-write-without-quotes title)
                "', Generated: "
                (format-date "(~A) ~Y-~m-~dT~H:~M~Z" (date))
                "\"];\n")) ; 45 inches ~ISO-A0 ; dpi typographic
      (display "node [style=filled];\n"))

    (define (print-epilogue)
      (display "}\n"))

    (define (select-node-fillcolor full-path)
      (cond ((not (file-directory? full-path #f)) "white")
            ((directory-album? full-path) "pink")
            ((directory-deliberately-terminate? full-path) "red")
            ((directory-repo? full-path) "green")
            ((directory-project? full-path) "tomato")
            (else "white")))
    
    (define (select-node-shape filename)
      (cond
       ((and (file-directory? filename #f) (directory-repo? filename)) "doubleoctagon")
       ((and (file-directory? filename #f) (directory-project? filename)) "house")
       ((file-directory? filename #f) "ellipse")
       ((file-regular? filename #f) "box")
       (else "underline")))

    

    (define (wrap-string-hack str)
      (define hack-width 14)
      (if (< (string-length str) hack-width)
         str
         (string-append (substring str 0 hack-width)
                        "\n"
                        (wrap-string-hack (substring str hack-width (string-length str))))))
    
    (define (format-edge source-name target-name)
      (string-append (lwf-make-dev-plus-inode source-name) ; (escape-like-write source-name)
                     " -> "
                     (lwf-make-dev-plus-inode target-name) ; (escape-like-write target-name)
                     " [arrowhead=\"vee\", arrowsize=0.318] // [len=3]"
                     (if (not (file-symlink? target-name))
                        ""
                        (string-append "\n"
                                       (lwf-make-dev-plus-inode target-name) ; (escape-like-write target-name)
                                       " -> "
                                       (lwf-make-dev-plus-inode (read-symlink target-name)) ; (escape-like-write (read-symlink target-name))
                                       " [color=\"cornflowerblue\"] // [len=3]"
                                       ))))
    

    (define (main)
      (print-prologue)
      (map (lambda (filename)
             (let* ((target (parse-filename filename))
                    (target-shape (select-node-shape filename))
                    (target-label (car target))
                    (source-name (string-join (reverse (cdr target)) "/"))
                    (node-string (format-node filename target-label target-shape))
                    (edge-string (format-edge source-name filename))
                    )
               (display node-string) (newline)
               (display edge-string) (newline)))
           (run/strings (find ,(argv 1 ".") -print)))
      (newline)
      (print-epilogue))
    )
  )

;; Local Variables:
;; mode: scheme
;; scheme-program-name: "scsh"
;; End:

